/// @description Particle and forces.
// draw_self();
with (oGrid) var _step = step;

// Particle:
if (!gPoint && !ePoint)
	draw_circle_color(x, y, r/2, color, color, false);
else if (gPoint || ePoint)
{
	draw_circle_color(x, y, r/2, color, color, true);
	if (gPoint && !ePoint) draw_text(x - r/4, y - r/2, "G");
	else if (!gPoint && ePoint) draw_text(x - r/4, y - r/2, "E");
}
draw_set_color(c_white);
draw_text(x, y, string(xGrid(x)) + " " + string(yGrid(y)));	// Particle position.

// Forces:
grav_x = 0;
grav_y = 0;
elec_x = 0;
elec_y = 0;
var eqMass = mass == 0 ? 1 : mass;
if (global.graviational)
{	
	var G = 6.67408*power(10, -11);	// Gravitational constant (Newton's constant).
	var gModifier = global.massUnits;
	with (oParticle)
	{
		var inRange = (abs(xPos - other.xPos) + abs(yPos - other.yPos)) > 0.7/global.zoom;
		// @TODO: change with collision_rectangle
		if (other != self && !self.gPoint && inRange)
		// The code runs on every single particle except this one, and doesn't run
		// if the particles are too close together (to avoid crashes).
		{
			// Gravitational force generated by another single particle:
			var sqrDistance = sqr(xPos - other.xPos) + sqr(yPos - other.yPos);
			var itGrav = -G*power(10, gModifier)*mass*other.mass/sqrDistance;
			// Angle of the particles and the x-axis:
			var angle = arctan2(other.yPos - yPos, other.xPos - xPos);
			other.grav_x += itGrav*cos(angle);
			other.grav_y += itGrav*sin(angle);
		}
	}
	draw_set_color(c_fuchsia);
	draw_arrow(x, y, xRoom(xPos + grav_x/eqMass), yRoom(yPos + grav_y/eqMass), 15);
}
grav = sqrt(sqr(grav_x) + sqr(grav_y));

if (global.electric)
{
	var k = 8.99*power(10, 9);	// Electric constant (Coulomb's constant).
	var eModifier = global.elecUnits;
	with (oParticle)
	{
		var inRange = (abs(xPos - other.xPos) + abs(yPos - other.yPos)) > 0.7/global.zoom;
		// @TODO: change with collision_rectangle
		if (other != self && !self.ePoint && inRange)
		// The code runs on every single particle except this one, and doesn't run
		// if the particles are too close together (to avoid crashes).
		{
			// Electric force generated by another single particle:			
			var sqrDistance = sqr(xPos - other.xPos) + sqr(yPos - other.yPos);
			var itElec = k*power(10, eModifier)*charge*other.charge/sqrDistance;
			// Angle of the particles and the x-axis:
			var angle = arctan2(other.yPos - yPos, other.xPos - xPos);
			other.elec_x += itElec*cos(angle);
			other.elec_y += itElec*sin(angle);
		}
	}
	draw_set_color(c_yellow);
	draw_arrow(x, y, xRoom(xPos + elec_x/eqMass), yRoom(yPos + elec_y/eqMass), 15);
}
elec = sqrt(sqr(elec_x) + sqr(elec_y));

var drawInertial = global.inertial ? 1 : 0;
if (global.decompose)
{
	draw_set_color(c_red);
	draw_arrow(x, y, xRoom(xPos + (grav_x + elec_x + inertial_x*drawInertial)/eqMass), y, 15);
	draw_set_color(c_blue);
	draw_arrow(x, y, x, yRoom(yPos + (grav_y + elec_y + inertial_y*drawInertial)/eqMass), 15);
}
draw_set_color(c_gray);
draw_arrow(x, y, xRoom(xPos + inertial_x*drawInertial/eqMass),
	yRoom(yPos - inertial_y*drawInertial/eqMass), 15);
	
if (global.resulting)
{
	draw_set_color(c_lime);
	draw_arrow(x, y, xRoom(xPos + (grav_x + elec_x + inertial_x*drawInertial)/eqMass),
		yRoom(yPos + (grav_y + elec_y + inertial_y*drawInertial)/eqMass), 15);
}
draw_set_color(c_navy);

if (global.velocity)
	draw_arrow(x, y, xRoom(xPos + velocity_x*global.zoom), yRoom(yPos + velocity_y*global.zoom), 15);

// Menu:
if (menu || menu_growing)
{
	
	var show = min(20 - alarm_get(0), 20);			// Menu grows over time.
	draw_set_color(make_color_rgb(44, 47, 51));		// Discord blacker - inner rectangle.
	draw_rectangle(x, y, x + 11*show, y + 17.3*show, false);
	draw_set_color(make_color_rgb(153, 170, 181));	// Discord light - rectangle's border.
	draw_rectangle(x - 1, y - 1, x + 11*show, y + 17.3*show, true);
	if (show == 20)
		{
			// Menu text:
			draw_set_color(c_white);
			draw_text_ext_transformed(x + 5, y + 3,
			"Position\nx:\ny:\n \nMass:\nCharge:\n \nVelocity x:\nVelocity y:\n \nInertial force\nx:\ny:\n \nField point:\nGravitat.    Electric",
			20, 210, 1, 1, 0);
		}
}